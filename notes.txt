#run composer to bring everything up
docker-compose up
## run npm local
set PORT=8001 && npm start

######run test directly in the container
>docker exec -it monitoring-devapi-1 python test.py

######go in bash mode
>docker exec -it monitoring-devapi-1 /bin/sh


######db access
>docker exec -it monitoring-db-1 bash
>hostname -I
172.19.0.2
>psql -h 172.20.0.2-U myuser -d mydatabase
Password for user myuser: mypassword
        ##OR##
> psql -h localhost -U gem_user -d monitoring_db
Password for user gem_user: P@ssword123



### DB Creation
--CREATE TABLE public.test_table (
--    id SERIAL PRIMARY KEY,
--    "comment" text NULL
--);
--
--
--INSERT INTO public.test_table ("comment") VALUES
--('This is the first comment'),
--('Another comment goes here'),
--('Testing auto-increment ID'),
--('Sample comment with special characters !@#$%^&*()'),
--('Last comment in the test data');

CREATE TABLE monitored_services (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    ip_address TEXT NOT NULL,
    port INTEGER NOT NULL,
    protocol TEXT NOT NULL,
    check_interval_sec INTEGER DEFAULT 60,
    last_status TEXT DEFAULT 'unknown',
    success_count INTEGER DEFAULT 0,
    failure_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE monitoring_logs (
    id SERIAL PRIMARY KEY,
    service_id INTEGER REFERENCES monitored_services(id) ON DELETE CASCADE,
    checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT NOT NULL,  -- e.g., 'up', 'down'
    message TEXT,
    notification_sent BOOLEAN DEFAULT FALSE
);


ALTER TABLE monitored_services
ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN comment TEXT DEFAULT NULL;

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER trg_monitored_services_updated_at
BEFORE UPDATE ON monitored_services
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

ALTER TABLE monitoring_logs
ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN comment TEXT DEFAULT NULL;

CREATE TRIGGER trg_monitoring_logs_updated_at
BEFORE UPDATE ON monitoring_logs
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();
###
######Running Test Codes
python -m test_code.db_test



------

service cron status
docker exec -it gem_monitoring_devapi_1 tail -f /var/log/cron/monitoring.log

tail -f /var/log/cron/monitoring.log
---------

docker-compose down

docker cp monitoring_db_backup.sql gem_monitoring_db_1:/monitoring_db_backup.sql
docker exec -it gem_monitoring_db_1 bash

psql --U gem_user -d monitoring_db -f /monitoring_db_backup.sql

docker-compose up --build -d